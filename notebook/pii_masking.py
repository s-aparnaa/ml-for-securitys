# -*- coding: utf-8 -*-
"""PII Masking.ipynb

Automatically generated by Colab.

"""

# 📦 Step 1: Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Replace 'english_pii_43k.jsonl' with your actual filename
file_path = '/content/drive/MyDrive/foldername/english_pii_43k.jsonl'

# 📌 STEP 3: Load the data from JSONL format into a list of dicts
import json

entries = []
with open(file_path, 'r', encoding='utf-8') as f:
    for line in f:
        entries.append(json.loads(line.strip()))

print(f"✅ Loaded {len(entries)} records from the file.")

# 📊 STEP 4: Lite Data Audit Check
import pandas as pd

df = pd.DataFrame(entries)

print("\n📊 Dataset Overview:")
print("👉 Shape (rows, columns):", df.shape)
print("👉 Data types:\n", df.dtypes)
print("👉 Missing values per column:\n", df.isnull().sum())

# Optional: Preview first few records
print("\n📝 Sample record:")
print(df.head(1))

# 📌 STEP 5: Define mapping for standardized placeholder tags
tag_map = {
    'FIRSTNAME': 'NAME',
    'PHONEIMEI': 'IMEI',
    'VEHICLEVIN': 'VEHICLE',
    'AGE': 'AGE',
    'PASSWORD': 'PASSWORD',
    'GENDER': 'GENDER',
    'BUILDINGNUMBER': 'ADDRESS',
    # Add more mappings as needed
}

def standardize_tag(tag):
    """Extracts base tag and maps it to a standard tag using tag_map"""
    for key in tag_map:
        if tag.startswith(key):
            return tag_map[key]
    return tag  # fallback: return original tag

def standardize_placeholder(original_tag):
    """Converts [FIRSTNAME_1] -> [NAME] using tag_map"""
    clean = original_tag.strip('[]')           # remove square brackets
    base = clean.split('_')[0]                 # keep part before underscore
    std = standardize_tag(base)
    return f'[{std}]'

# 📌 STEP 6: Define the masking function with tag standardization
def mask_pii_standard(unmasked_text, privacy_mask_json):
    try:
        valid_json = privacy_mask_json.replace("'", '"')  # fix JSON formatting
        pii_map = json.loads(valid_json)
        for placeholder, actual_value in pii_map.items():
            standardized = standardize_placeholder(placeholder)
            unmasked_text = unmasked_text.replace(actual_value, standardized)
        return unmasked_text
    except Exception as e:
        return f"ERROR: {e}"

# 📌 STEP 7: Apply the masking function to each entry
masked_data = []
for entry in entries:
    original = entry['unmasked_text']
    privacy_mask = entry['privacy_mask']
    masked = mask_pii_standard(original, privacy_mask)
    masked_data.append({
        'original': original,
        'masked_output': masked
    })

# 📌 STEP 8: Convert to DataFrame and export to CSV in the same foldername folder
output_df = pd.DataFrame(masked_data)
output_path = '/content/drive/MyDrive/foldername/masked_output_standard.csv'
output_df.to_csv(output_path, index=False)

print(f"\n✅ Final CSV saved to: {output_path}")